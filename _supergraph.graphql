directive @schema(name: String!) on ENUM_VALUE

directive @type(
  schema: Schema!
) repeatable on OBJECT | INTERFACE | UNION | ENUM | INPUT_OBJECT | SCALAR

directive @lookup(
  schema: Schema!
  key: String!
  field: [FieldDefinition!]
  map: [FieldSelectionMap!]
) repeatable on OBJECT | INTERFACE

directive @requires(
  schema: Schema!
  field: String!
  map: String!
) repeatable on OBJECT

directive @field(
  schema: Schema
  provides: FieldSet
  sourceType: Type
  external: Boolean! = false
) repeatable on FIELD_DEFINITION

directive @implements(
  schema: Schema!
  interface: String!
) repeatable on OBJECT | INTERFACE

directive @unionMember(
  schema: Schema!, 
  member: String!
) repeatable on UNION

directive @enumValue(schema: Schema!) repeatable on ENUM_VALUE

scalar FieldDefinition
scalar FieldSelectionMap
scalar FieldSelectionSet
scalar Type

enum Schema {
  A @schema(name: "a") 
  B @schema(name: "b")
  C @schema(name: "c")
  D @schema(name: "d")
}

type B {
  id: ID!
  user: User!
}

type D {
  id: ID!
  user: User! @field(schema: D, provides: "id")
}

type E {
  id: ID!
  foo(id: ID!): Foo
  foo(id: ID!, foo: String @require(field: "")): Foo
    @require(schema: A, argument: "foo: String!",  map: "id")
    @require(schema: A, argument: "foo: String!",  map: "id")
    @require(schema: A, argument: "foo: String!",  map: "id")
}

type Query 
  @type(schema: A) 
  @type(schema: B) 
  @type(schema: C) 
  @type(schema: D) {
  a: User @field(schema: A)
  userById(
    id: ID! 
      @inputField(schema: A, is: "id") 
      @inputField(schema: B, is: "id")
      ): User 
        @internal 
        @field(schema: A) 
        @field(schema: B)
  userByUuid(uuid: String!): User 
    @internal 
    @field(schema: A)
  
  user(finder: UserFinder!): User
    @field(schema: A) 
}

input UserFinder @type(schema: A) @oneOf {
  id: ID
  uuid: String
}

input UserFinder {
  id: ID
}

type User implements Node
  @type(schema: [A C])
  
  @lookup(
    schema: B,
    key: "uuid",
    lookup: "user(finder: UserFinder!) : User", 
    map: "{ finder: { id: foo.<Bar>.id | foo.<Baz>.hello.id } }",
    patch: true)

 

  @type(schema: A, key: "id" lookup: "userById")
  @type(schema: A, key: "id" lookup: "userById")
  @type(schema: A, key: "uuid" lookup: "user")
  @type(schema: B, key: "id" lookup: "user")
  @type(schema: A, key: "uuid" lookup: "userByUuid")
  @type(schema: B, key: "uuid" lookup: "userByUuid")
  @type(schema: C, key: "id" lookup: "userById")
  @type(schema: C, key: "uuid" lookup: "userByUuid")
  @type(schema: D, key: "uuid" lookup: "userByUuid") 
  @implements(schema: B, interface: "Node") {
  id: ID! 
    @field(schema: A) 
    @field(schema: C) 
    @field(schema: D, external: true)
  uuid: String!
  name: String! @field(schema: A)
  commentCount: Int! @field(schema: C)
}
